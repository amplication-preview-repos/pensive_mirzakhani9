/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollegeService } from "../college.service";
import { CollegeCreateInput } from "./CollegeCreateInput";
import { College } from "./College";
import { CollegeFindManyArgs } from "./CollegeFindManyArgs";
import { CollegeWhereUniqueInput } from "./CollegeWhereUniqueInput";
import { CollegeUpdateInput } from "./CollegeUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { DepartmentFindManyArgs } from "../../department/base/DepartmentFindManyArgs";
import { Department } from "../../department/base/Department";
import { DepartmentWhereUniqueInput } from "../../department/base/DepartmentWhereUniqueInput";

export class CollegeControllerBase {
  constructor(protected readonly service: CollegeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: College })
  async createCollege(
    @common.Body() data: CollegeCreateInput
  ): Promise<College> {
    return await this.service.createCollege({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [College] })
  @ApiNestedQuery(CollegeFindManyArgs)
  async colleges(@common.Req() request: Request): Promise<College[]> {
    const args = plainToClass(CollegeFindManyArgs, request.query);
    return this.service.colleges({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: College })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async college(
    @common.Param() params: CollegeWhereUniqueInput
  ): Promise<College | null> {
    const result = await this.service.college({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: College })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollege(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() data: CollegeUpdateInput
  ): Promise<College | null> {
    try {
      return await this.service.updateCollege({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: College })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollege(
    @common.Param() params: CollegeWhereUniqueInput
  ): Promise<College | null> {
    try {
      return await this.service.deleteCollege({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: CollegeWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,
        onCampus: true,
        hostelOfResidence: true,
        userName: true,
        role: true,
        hallOfResidence: true,
        profilePicture: true,
        year: true,

        college: {
          select: {
            id: true,
          },
        },

        department: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  async connectUsers(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  async updateUsers(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  async disconnectUsers(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/departments")
  @ApiNestedQuery(DepartmentFindManyArgs)
  async findDepartments(
    @common.Req() request: Request,
    @common.Param() params: CollegeWhereUniqueInput
  ): Promise<Department[]> {
    const query = plainToClass(DepartmentFindManyArgs, request.query);
    const results = await this.service.findDepartments(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        college: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/departments")
  async connectDepartments(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        connect: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/departments")
  async updateDepartments(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        set: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/departments")
  async disconnectDepartments(
    @common.Param() params: CollegeWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        disconnect: body,
      },
    };
    await this.service.updateCollege({
      where: params,
      data,
      select: { id: true },
    });
  }
}
