/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  College as PrismaCollege,
  User as PrismaUser,
  Department as PrismaDepartment,
} from "@prisma/client";

export class CollegeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CollegeCountArgs, "select">): Promise<number> {
    return this.prisma.college.count(args);
  }

  async colleges(args: Prisma.CollegeFindManyArgs): Promise<PrismaCollege[]> {
    return this.prisma.college.findMany(args);
  }
  async college(
    args: Prisma.CollegeFindUniqueArgs
  ): Promise<PrismaCollege | null> {
    return this.prisma.college.findUnique(args);
  }
  async createCollege(args: Prisma.CollegeCreateArgs): Promise<PrismaCollege> {
    return this.prisma.college.create(args);
  }
  async updateCollege(args: Prisma.CollegeUpdateArgs): Promise<PrismaCollege> {
    return this.prisma.college.update(args);
  }
  async deleteCollege(args: Prisma.CollegeDeleteArgs): Promise<PrismaCollege> {
    return this.prisma.college.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.college
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findDepartments(
    parentId: string,
    args: Prisma.DepartmentFindManyArgs
  ): Promise<PrismaDepartment[]> {
    return this.prisma.college
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .departments(args);
  }
}
