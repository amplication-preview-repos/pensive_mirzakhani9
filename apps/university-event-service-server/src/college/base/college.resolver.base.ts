/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { College } from "./College";
import { CollegeCountArgs } from "./CollegeCountArgs";
import { CollegeFindManyArgs } from "./CollegeFindManyArgs";
import { CollegeFindUniqueArgs } from "./CollegeFindUniqueArgs";
import { CreateCollegeArgs } from "./CreateCollegeArgs";
import { UpdateCollegeArgs } from "./UpdateCollegeArgs";
import { DeleteCollegeArgs } from "./DeleteCollegeArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { DepartmentFindManyArgs } from "../../department/base/DepartmentFindManyArgs";
import { Department } from "../../department/base/Department";
import { CollegeService } from "../college.service";
@graphql.Resolver(() => College)
export class CollegeResolverBase {
  constructor(protected readonly service: CollegeService) {}

  async _collegesMeta(
    @graphql.Args() args: CollegeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [College])
  async colleges(
    @graphql.Args() args: CollegeFindManyArgs
  ): Promise<College[]> {
    return this.service.colleges(args);
  }

  @graphql.Query(() => College, { nullable: true })
  async college(
    @graphql.Args() args: CollegeFindUniqueArgs
  ): Promise<College | null> {
    const result = await this.service.college(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => College)
  async createCollege(
    @graphql.Args() args: CreateCollegeArgs
  ): Promise<College> {
    return await this.service.createCollege({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => College)
  async updateCollege(
    @graphql.Args() args: UpdateCollegeArgs
  ): Promise<College | null> {
    try {
      return await this.service.updateCollege({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => College)
  async deleteCollege(
    @graphql.Args() args: DeleteCollegeArgs
  ): Promise<College | null> {
    try {
      return await this.service.deleteCollege(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User], { name: "users" })
  async findUsers(
    @graphql.Parent() parent: College,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Department], { name: "departments" })
  async findDepartments(
    @graphql.Parent() parent: College,
    @graphql.Args() args: DepartmentFindManyArgs
  ): Promise<Department[]> {
    const results = await this.service.findDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
